// Fill out your copyright notice in the Description page of Project Settings.

#include "MyProject.h"
#include "grabber.h"

#define OUT

// Sets default values for this component's properties
Ugrabber::Ugrabber()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	bWantsBeginPlay = true;
	PrimaryComponentTick.bCanEverTick = true;

	// ...
}


// Called when the game starts
void Ugrabber::BeginPlay()
{
	Super::BeginPlay();
	findPhysicsHandleComponent();
	setUpInputComponent();	
}


// Called every frame
void Ugrabber::TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction )
{
	Super::TickComponent( DeltaTime, TickType, ThisTickFunction );
	

	if (PhysicsHandle->GrabbedComponent) //if you can grab it, grab it
	{
		PhysicsHandle->SetTargetLocation(getReachLinEnd());
	}

}

void Ugrabber::Grab()
{
	// try and reach any actors with physics body collision channel set
	auto HitResult =  GetFirstPhysicsBodyInReach();
	auto ComponentToGrab = HitResult.GetComponent();
	auto ActorHit = HitResult.GetComponent();

	if (ActorHit)
	{
		PhysicsHandle->GrabComponent(ComponentToGrab, NAME_None, ComponentToGrab->GetOwner()->GetActorLocation(), true);
	}
}
void Ugrabber::Releases()
{
	PhysicsHandle->ReleaseComponent();
}

void Ugrabber::findPhysicsHandleComponent()
{
	PhysicsHandle = GetOwner()->FindComponentByClass<UPhysicsHandleComponent>();
	if (PhysicsHandle == nullptr)
	{
		UE_LOG(LogTemp, Error, TEXT("%s missing physics handle component"), *GetOwner()->GetName());
	}
}




void Ugrabber::setUpInputComponent()
{
	//Look for attached Input component
	InputComponent = GetOwner()->FindComponentByClass<UInputComponent>();
	
	if (InputComponent)
	{
		//physics handle is found
		UE_LOG(LogTemp, Warning, TEXT("%s found input component"), *GetOwner()->GetName());
		//Bind the input axis
		InputComponent->BindAction("Release", IE_Pressed, this, &Ugrabber::Releases);
		InputComponent->BindAction("Grab", IE_Pressed, this, &Ugrabber::Grab);
		//InputComponent->BindAction("Grab", IE_Pressed, this, &Ugrabber::Release);

	}
	else
	{
		UE_LOG(LogTemp, Error, TEXT("%s missing physics handle component"), *GetOwner()->GetName());
	}
}

const FHitResult Ugrabber::GetFirstPhysicsBodyInReach()
{
	//if hte phyics handle is attached
	//move the object that we're holding

	//////Get player view point this tick
	////FVector PlayerViewPointLocation;
	////FRotator PlayerViewPointRotation;
	////GetWorld()->GetFirstPlayerController()->GetPlayerViewPoint(OUT PlayerViewPointLocation, OUT PlayerViewPointRotation);

	//////UE_LOG(LogTemp,Warning,TEXT("Location: %s, Rotation: %s"), *PlayerViewPointLocation.ToString(), *PlayerViewPointRotation.ToString())

	////FVector LineTraceEnd = PlayerViewPointLocation + (PlayerViewPointRotation.Vector() * reach);

	//Draw a red Vector
	////DrawDebugLine(GetWorld(), PlayerViewPointLocation, LineTraceEnd, FColor(255, 0, 0), false, 0.0f, 0.0f, 10.f);

	//SetUp query parameters
	

	//Ray-cast out to reach distance
	FHitResult hit;
	FCollisionQueryParams traceParameters(FName(TEXT("")), false, GetOwner());

	GetWorld()->LineTraceSingleByObjectType(OUT hit, getReachLinStart(), getReachLinEnd(), FCollisionObjectQueryParams(ECollisionChannel::ECC_PhysicsBody), traceParameters);


	return hit;
}


FVector Ugrabber::getReachLinEnd()
{
	FVector PlayerViewPointLocation;
	FRotator PlayerViewPointRotation;
	GetWorld()->GetFirstPlayerController()->GetPlayerViewPoint(OUT PlayerViewPointLocation, OUT PlayerViewPointRotation);

	FVector LineTraceEnd = PlayerViewPointLocation + PlayerViewPointRotation.Vector() * reach;

	return LineTraceEnd;
}

FVector Ugrabber::getReachLinStart()
{
	FVector PlayerViewPointLocation;
	FRotator PlayerViewPointRotation;
	GetWorld()->GetFirstPlayerController()->GetPlayerViewPoint(OUT PlayerViewPointLocation, OUT PlayerViewPointRotation);

	

	return PlayerViewPointLocation;
}